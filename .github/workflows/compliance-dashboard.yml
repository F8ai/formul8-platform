name: Compliance Dashboard Metrics

on:
  push:
    branches: [ main ]
    paths: 
      - 'compliance-agent/**'
      - '.github/workflows/compliance-dashboard.yml'
  pull_request:
    branches: [ main ]
    paths: 
      - 'compliance-agent/**'
  schedule:
    - cron: '0 6 * * *'  # Daily at 6 AM UTC
    - cron: '0 18 * * *'  # Daily at 6 PM UTC (twice daily for better coverage)
  workflow_dispatch:

jobs:
  generate-metrics:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r compliance-agent/requirements.txt || echo "No requirements.txt found"
        pip install requests beautifulsoup4 python-dateutil pyyaml
    
    - name: Create directories
      run: |
        mkdir -p compliance-agent/dashboard
        mkdir -p compliance-agent/compliance_data/states
        mkdir -p compliance-agent/config
    
    - name: Generate dashboard metrics
      run: |
        cd compliance-agent
        python dashboard/state_metrics.py --output dashboard/dashboard_metrics.json
    
    - name: Validate metrics
      run: |
        cd compliance-agent
        python -c "
        import json
        import sys
        try:
            with open('dashboard/dashboard_metrics.json', 'r') as f:
                data = json.load(f)
            print(f'‚úì Dashboard metrics generated successfully')
            print(f'‚úì Total states: {data.get(\"total_states\", 0)}')
            print(f'‚úì System health: {data.get(\"system_health\", {}).get(\"overall_health_score\", 0)}%')
            print(f'‚úì Total citations: {data.get(\"summary_metrics\", {}).get(\"total_citations\", 0)}')
            print(f'‚úì Total vectors: {data.get(\"summary_metrics\", {}).get(\"total_vectors\", 0)}')
        except Exception as e:
            print(f'‚úó Error validating metrics: {e}')
            sys.exit(1)
        "
    
    - name: Generate state processing report
      run: |
        cd compliance-agent
        python -c "
        import json
        import datetime
        
        # Load dashboard data
        with open('dashboard/dashboard_metrics.json', 'r') as f:
            data = json.load(f)
        
        # Generate markdown report
        report = f'''# Compliance Agent Dashboard Report
        
        **Generated:** {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}
        
        ## System Overview
        - **Total States:** {data['total_states']}
        - **System Health:** {data['system_health']['overall_health_score']}%
        - **Completion Rate:** {data['processing_status']['completion_rate']}%
        
        ## Data Collection Summary
        - **Files Downloaded:** {data['summary_metrics']['total_files_downloaded']:,}
        - **Download Size:** {data['summary_metrics']['total_download_size_mb']:.1f} MB
        - **Citations Extracted:** {data['summary_metrics']['total_citations']:,}
        - **Vector Embeddings:** {data['summary_metrics']['total_vectors']:,}
        
        ## State Processing Status
        - **Completed:** {data['summary_metrics']['states_completed']} states
        - **In Progress:** {data['summary_metrics']['states_in_progress']} states
        - **Failed:** {data['summary_metrics']['states_failed']} states
        - **Not Started:** {data['summary_metrics']['states_not_started']} states
        
        ## Top Performers
        
        ### Highest Quality States
        '''
        
        for i, state in enumerate(data['top_performers']['highest_quality'][:3], 1):
            report += f'{i}. **{state[\"state_name\"]}** - {state[\"quality_score\"]*100:.1f}% quality score\n'
        
        report += '''
        ### Most Data Collected
        '''
        
        for i, state in enumerate(data['top_performers']['most_data'][:3], 1):
            report += f'{i}. **{state[\"state_name\"]}** - {state[\"files_downloaded\"]:,} files\n'
        
        report += f'''
        ## Pipeline Health
        - **Healthy States:** {data['system_health']['healthy_states']}
        - **Failed States:** {data['system_health']['failed_states']}
        - **System Status:** {data['system_health']['system_status'].upper()}
        
        ---
        *This report is automatically generated by the Compliance Agent pipeline*
        '''
        
        with open('dashboard/compliance_report.md', 'w') as f:
            f.write(report)
        
        print('‚úì Compliance report generated')
        "
    
    - name: Commit and push if changed
      run: |
        git config --global user.name 'Compliance Agent Bot'
        git config --global user.email 'compliance-bot@formul8.ai'
        git add compliance-agent/dashboard/
        git diff --staged --quiet || git commit -m "ü§ñ Update compliance dashboard metrics - $(date)"
        git push || echo "No changes to push"
    
    - name: Create issue on failure
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'üö® Compliance Dashboard Metrics Generation Failed',
            body: `
            The compliance dashboard metrics generation failed in workflow run #${context.runNumber}.
            
            **Workflow:** ${context.workflow}
            **Branch:** ${context.ref}
            **Commit:** ${context.sha}
            
            Please check the workflow logs for details.
            
            **Next Steps:**
            1. Check the Python script execution
            2. Verify state processing pipeline
            3. Validate configuration files
            4. Review data collection processes
            
            This issue was automatically created by the Compliance Agent Bot.
            `,
            labels: ['bug', 'compliance', 'automation']
          })
    
    - name: Summary
      run: |
        echo "üéØ Compliance Dashboard Summary"
        echo "=============================="
        echo "‚úÖ Dashboard metrics generated successfully"
        echo "üìä State processing metrics updated"
        echo "üìà Performance analytics available"
        echo "üîÑ Pipeline health monitoring active"
        echo ""
        echo "üîó View dashboard at: /agent/compliance"
        echo "üì± Mobile-responsive design with real-time updates"
        echo "üí¨ Chat functionality with compliance expert"
        echo "‚öôÔ∏è Prompt engineering configuration available"