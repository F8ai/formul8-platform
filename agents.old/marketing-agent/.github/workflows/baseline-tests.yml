name: Baseline Tests & Badge Updates

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 6 * * *'  # Daily at 6 AM UTC

jobs:
  baseline-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install langchain langchain-openai langchain-community faiss-cpu rdflib
        pip install requests beautifulsoup4 pandas numpy
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Run baseline tests
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        python run_agent.py --test > test_results.txt 2>&1 || true
        cat test_results.txt
    
    - name: Parse test results and generate badges
      run: |
        # Extract test results
        PASSED=$(grep -o "Test Results: [0-9]*/" test_results.txt | grep -o "[0-9]*" | head -1 || echo "0")
        TOTAL=$(grep -o "Test Results: [0-9]*/[0-9]*" test_results.txt | grep -o "/[0-9]*" | grep -o "[0-9]*" || echo "10")
        CONFIDENCE=$(grep -o "Average Confidence: [0-9]*\.[0-9]*" test_results.txt | grep -o "[0-9]*\.[0-9]*" || echo "0.00")
        
        # Calculate percentage
        if [ "$TOTAL" -gt 0 ]; then
          PERCENTAGE=$(echo "scale=1; $PASSED * 100 / $TOTAL" | bc -l)
        else
          PERCENTAGE="0.0"
        fi
        
        # Determine badge color
        if (( $(echo "$PERCENTAGE >= 90" | bc -l) )); then
          COLOR="brightgreen"
        elif (( $(echo "$PERCENTAGE >= 70" | bc -l) )); then
          COLOR="yellow"
        else
          COLOR="red"
        fi
        
        # Generate badge URLs
        echo "ACCURACY_BADGE=https://img.shields.io/badge/Accuracy-${PERCENTAGE}%25-${COLOR}" >> $GITHUB_ENV
        echo "TESTS_BADGE=https://img.shields.io/badge/Tests-${PASSED}%2F${TOTAL}-blue" >> $GITHUB_ENV
        
        # Confidence badge color
        CONF_INT=$(echo "$CONFIDENCE * 100" | bc -l | cut -d. -f1)
        if [ "$CONF_INT" -ge 80 ]; then
          CONF_COLOR="brightgreen"
        elif [ "$CONF_INT" -ge 60 ]; then
          CONF_COLOR="yellow"
        else
          CONF_COLOR="red"
        fi
        echo "CONFIDENCE_BADGE=https://img.shields.io/badge/Confidence-${CONFIDENCE}-${CONF_COLOR}" >> $GITHUB_ENV
    
    - name: Create metrics directory
      run: mkdir -p metrics
    
    - name: Save test metrics
      run: |
        PASSED=$(grep -o "Test Results: [0-9]*/" test_results.txt | grep -o "[0-9]*" | head -1 || echo "0")
        TOTAL=$(grep -o "Test Results: [0-9]*/[0-9]*" test_results.txt | grep -o "/[0-9]*" | grep -o "[0-9]*" || echo "10")
        CONFIDENCE=$(grep -o "Average Confidence: [0-9]*\.[0-9]*" test_results.txt | grep -o "[0-9]*\.[0-9]*" || echo "0.00")
        PERCENTAGE=$(echo "scale=1; $PASSED * 100 / $TOTAL" | bc -l)
        
        echo "$PASSED" > metrics/passed.txt
        echo "$TOTAL" > metrics/total.txt  
        echo "$CONFIDENCE" > metrics/confidence.txt
        echo "$PERCENTAGE" > metrics/accuracy.txt
        date "+%Y-%m-%d %H:%M:%S UTC" > metrics/last_updated.txt
    
    - name: Commit metrics
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add metrics/ || true
        git commit -m "Update test metrics [skip ci]" || true
        git push || true