# Multi-stage optimized Dockerfile for Formul8 Platform
# Optimized for <100MB Docker image size

# Build stage
FROM node:18-alpine AS builder

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./
COPY tsconfig.json ./
COPY drizzle.config.ts ./

# Install dependencies
RUN npm ci --only=production && npm cache clean --force

# Copy source code (exclude large directories via .dockerignore)
COPY client ./client
COPY server ./server
COPY shared ./shared

# Build production assets
RUN npx vite build && \
    npx esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist --minify

# Production stage
FROM node:18-alpine AS production

# Install dumb-init for proper signal handling
RUN apk add --no-cache dumb-init

# Create non-root user
RUN addgroup -g 1001 -S nodejs && adduser -S nodejs -u 1001

# Set working directory
WORKDIR /app

# Copy production files from builder
COPY --from=builder --chown=nodejs:nodejs /app/dist ./
COPY --from=builder --chown=nodejs:nodejs /app/node_modules ./node_modules

# Create package.json for production
RUN echo '{"name":"formul8-platform","version":"1.0.0","type":"module","main":"index.js","scripts":{"start":"node index.js"},"engines":{"node":">=18.0.0"}}' > package.json

# Switch to non-root user
USER nodejs

# Expose port
EXPOSE 5000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "fetch('http://localhost:5000/api/health').then(r=>r.ok?process.exit(0):process.exit(1)).catch(()=>process.exit(1))"

# Start application
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "index.js"]