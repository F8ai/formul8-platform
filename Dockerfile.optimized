# Ultra-optimized multi-stage Docker build for Cloud Run
# Target: Under 1GB final image size

FROM node:20-alpine AS base
# Install only essential system packages
RUN apk add --no-cache curl dumb-init && \
    rm -rf /var/cache/apk/* /tmp/*

# Stage 1: Build frontend only
FROM base AS frontend-builder
WORKDIR /build

# Copy only package files for dependency installation
COPY package*.json ./
RUN npm ci --production=false --prefer-offline --no-audit --silent && \
    npm cache clean --force

# Copy frontend source files
COPY client/ ./client/
COPY shared/ ./shared/
COPY vite.config.ts tsconfig.json components.json ./

# Build frontend with maximum optimization
RUN npx vite build --mode production --outDir dist/public && \
    ls -la dist/public/ && \
    du -sh dist/public/

# Stage 2: Production runtime (minimal)
FROM base AS production

WORKDIR /app

# Copy only package files and install production dependencies
COPY package*.json ./
RUN npm ci --only=production --prefer-offline --no-audit --silent && \
    npm install tsx --no-save && \
    npm cache clean --force && \
    rm -rf /tmp/* ~/.npm /root/.cache

# Copy built frontend assets from builder
COPY --from=frontend-builder /build/dist/public ./server/public

# Copy only essential backend files
COPY server/ ./server/
COPY shared/ ./shared/
COPY drizzle.config.ts ./

# Create production startup script
RUN echo '#!/bin/sh\nset -e\necho "ðŸš€ Starting Formul8 Platform..."\nexec npx tsx server/index.ts' > start.sh && \
    chmod +x start.sh

# Create non-root user
RUN addgroup -g 1001 -S app && \
    adduser -S app -u 1001 -G app && \
    chown -R app:app /app

USER app

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD curl -f http://localhost:${PORT:-5000}/api/health || exit 1

EXPOSE ${PORT:-5000}

# Use exec form for proper signal handling
ENTRYPOINT ["dumb-init", "--"]
CMD ["./start.sh"]